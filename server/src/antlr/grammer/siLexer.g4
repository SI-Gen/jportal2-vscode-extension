lexer grammar siLexer;

fragment A : [aA]; // match either an 'a' or 'A'
fragment B : [bB];
fragment C : [cC];
fragment D : [dD];
fragment E : [eE];
fragment F : [fF];
fragment G : [gG];
fragment H : [hH];
fragment I : [iI];
fragment J : [jJ];
fragment K : [kK];
fragment L : [lL];
fragment M : [mM];
fragment N : [nN];
fragment O : [oO];
fragment P : [pP];
fragment Q : [qQ];
fragment R : [rR];
fragment S : [sS];
fragment T : [tT];
fragment U : [uU];
fragment V : [vV];
fragment W : [wW];
fragment X : [xX];
fragment Y : [yY];
fragment Z : [zZ];

// SK : ([ \t\r\n]
// | '/*' (~[*])* '*' (~[/] (~[*])* '*')* '/'
BLOCK_COMMENT: '/*' .*? '*/' -> skip;
LINE_COMMENT: '//' ~[\n\r]* -> skip;
WHITE_SPACE: [ \t\r\n] -> skip;

ALL:        	A L L;
ANSICHAR:	    A N S I|A N S I C H A R;
AS:           	A S;
AUTOTIMESTAMP:	A U T O T I M E S T A M P;
BIGIDENTITY:  B I G I D E N T I T Y;
BIGSEQUENCE:  B I G S E Q U E N C E;
BIGXML:       B I G X M L;
BLOB:         B L O B;
BOOLEAN:      B O O L E A N|B I T;
BULKINSERT:   B U L K I N S E R T;
BULKUPDATE:   B U L K U P D A T E;
BYTE:         B Y T E;
CALC:         C A L C;
CASCADE:      C A S C A D E;
CHAR:         C H A R;
CHECK:        C H E C K;
COUNT:        C O U N T;
CONST:        C O N S T|C O N S T A N T;
CURSOR:       C U R S O R;
DATABASE:     D A T A B A S E;
DATE:         D A T E;
DATETIME:     D A T E T I M E;
DECLARE:      D E C L A R E;
DEFAULTV:     D E F A U L T;
DELETE:       D E L E T E;
DELETEBY:     D E L E T E B Y;
DELETEALL:    D E L E T E A L L;
DELETEONE:    D E L E T E O N E;
DESC:         D E S C ;
DOUBLE:       D O U B L E;
DYNAMIC:      D Y N A M I C;
EXECUTE:      E X E C U T E;
EXISTS:       E X I S T S;
FLAGS:        F L A G S;
FLOAT:        F L O A T;
FOR:          F O R;
GRANT:        G R A N T;
IDENTITY:     I D E N T I T Y;
IMPORT:       I M P O R T;
IN:           I N;
INOUT:        I N O U T;
INPUT:        I N P U T;
INSERT:       I N S E R T;
INT:          I N T|I N T E G E R;
KEY:          K E Y;
LINK:         L I N K;
LONG:         L O N G;
MERGE:        M E R G E;
MONEY:        M O N E Y;
MULTIPLE:     M U L T I P L E;
NAMES:        N A M E S;
NOT:          N O T;
NULL:         N U L L;
OPTIONS:      O P T I O N S;
ORDER:        O R D E R|S O R T E D;
OUTPUT:       O U T P U T;
PACKAGE:      P A C K A G E;
PASSWORD:     P A S S W O R D;
PRIMARY:      P R I M A R Y;
PROC:         P R O C;
READONLY:     R E A D O N L Y;
RETURNING:    R E T U R N I N G;
SCHEMA:       S C H E M A;
SELECT:       S E L E C T;
SELECTALL:    S E L E C T A L L;
SELECTBY:     S E L E C T B Y;
FROM:         F R O M;
WHERE:        W H E R E;
SELECTONEBY:  S E L E C T O N E B Y;
SELECTONE:    S E L E C T O N E;
SEQUENCE:     S E Q U E N C E;
SERVER:       S E R V E R;
SHORT:        S H O R T;
SINGLE:       S I N G L E;
SQL:          S Q L;
SPROC:        S T O R E D P R O C|S P R O C;
STANDARD:     S T A N D A R D;
TABLE:        T A B L E;
TIME:         T I M E;
TIMESTAMP:    T I M E S T A M P;
TLOB:         T L O B|C L O B;
TO:           T O;
UID:          U I D;
UNIQUE:       U N I Q U E;
UPDATE:       U P D A T E;
UPDATEFOR:    U P D A T E F O R;
UPDATEBY:     U P D A T E B Y;
MAXTMSTAMP:   M A X T M S T A M P;
USERID:       U S E R I D;
USERSTAMP:    U S E R S T A M P;
UTF8:         U T F '8';
VIEW:         V I E W;
WANSICHAR:   W A N S I|W A N S I C H A R;
WCHAR:        W C H A R;
XML:          X M L;
PARM:         '{'P A R M'};';
PARMSHOWS:    '{'S H O W S'};';
PARMVIEWONLY: '{'V I E W O N L Y'};';
PARMCACHE:    '{'C A C H E'};';
PARMREADER:   '{'R E A D E R'};';
PARMINSERT:   '{'I N S E R T'};';
PARMDELETE:   '{'D E L E T E'};';
PARMUPDATE:   '{'U P D A T E'};';
PARMSUPPLIED: '{'S U P P L I E D'};';

COMMENT:      '**' (~[\n\r])* ('\n'|'\r\n');

ATSIGN:       '@';
COLON:        ':';
COMMA:        ',';
EQUALS:       '=';
LEFTBRACE:    '{';
LEFTBRACK:    '[';
LEFTPAREN:    '(';
RIGHTBRACE:   '};';
RIGHTBRACK:   ']';
RIGHTPAREN:   ')';
SEMICOLON:    ';';

NUMBER: (('-')? [1-9] ([0-9])*)|'0';
STRING: DQUOTEDS | SQUOTEDS ;
DQUOTEDS:('"' (~["\\] | '\\' ([\\'"])?)* '"');
SQUOTEDS:('\'' (~['\\] | '\\' ([\\'"])?)* '\'');
 
IDENTIFIER: (LETTER|EXTRA) (LETTER|DIGIT|EXTRA)*;
LIDENTIFIER: [lL] '\'' (LETTER|EXTRA|LITERAL) (LETTER|DIGIT|EXTRA|LITERAL)* '\'';
LETTER: [a-z_A-Z];
DIGIT:  [0-9];
EXTRA:  [#$];
LITERAL:["' \\] | RIGHTBRACK | LEFTBRACK;

POINT: '.';

SQLCODE : S Q L C O D E [ \t]* ('\n' | '\r' | '\r\n') -> pushMode(EMBEDDED);
SQLDATA : S Q L D A T A [ \t]* ('\n' | '\r' | '\r\n') -> pushMode(EMBEDDED);
IDLCODE : I D L C O D E [ \t]* ('\n' | '\r' | '\r\n') -> pushMode(EMBEDDED);
CODE : C O D E [ \t]* ('\n' | '\r' | '\r\n') -> pushMode(EMBEDDED);
DATA : D A T A [ \t]* ('\n' | '\r' | '\r\n') -> pushMode(EMBEDDED);

mode EMBEDDED;
ENDCODE : [ \t]* E N D C O D E [ \t]* ('\n' | '\r' | '\r\n')? -> popMode;
ENDDATA : [ \t]* E N D D A T A [ \t]* ('\n' | '\r' | '\r\n')? -> popMode;
CODELINE: (~[\n\r])* ('\r\n' | '\n' | '\r');